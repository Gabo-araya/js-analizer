#!/usr/bin/env python3
"""
Script de configuraci√≥n para las funcionalidades avanzadas de detecci√≥n
Ejecutar despu√©s de implementar las nuevas funcionalidades
"""
import os
import sys

def main():
    print("üöÄ Configurando funcionalidades avanzadas de detecci√≥n...")
    print("=" * 60)
    
    # 1. Verificar archivos necesarios
    required_files = [
        'library_detector.py',
        'populate_global_libraries.py',
        'dashboard.py',
        'analyzer.py'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå Archivos faltantes: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ Todos los archivos necesarios est√°n presentes")
    
    # 2. Poblar cat√°logo global
    print("\nüìö Poblando cat√°logo global de librer√≠as...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'populate_global_libraries.py'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Cat√°logo global poblado exitosamente")
            print(result.stdout)
        else:
            print("‚ö†Ô∏è Advertencia al poblar cat√°logo:")
            print(result.stderr)
    except Exception as e:
        print(f"‚ùå Error poblando cat√°logo: {str(e)}")
    
    # 3. Verificar imports
    print("\nüîç Verificando imports y dependencias...")
    try:
        from library_detector import LibraryDetector, detect_libraries_advanced
        print("‚úÖ library_detector importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando library_detector: {str(e)}")
        return False
    
    # 4. Crear archivos de configuraci√≥n si no existen
    print("\n‚öôÔ∏è Verificando archivos de configuraci√≥n...")
    
    if not os.path.exists('urls.txt'):
        sample_urls = [
            'https://jquery.com',
            'https://getbootstrap.com',
            'https://d3js.org',
            'https://www.chartjs.org'
        ]
        with open('urls.txt', 'w') as f:
            f.write('\n'.join(sample_urls) + '\n')
        print("‚úÖ Archivo urls.txt creado con URLs de ejemplo")
    
    # 5. Mostrar resumen de funcionalidades
    print("\nüéâ Configuraci√≥n completada exitosamente!")
    print("=" * 60)
    print("\nüìã FUNCIONALIDADES IMPLEMENTADAS:")
    print("1. ‚úÖ Base de librer√≠as conocidas integrada (12+ librer√≠as)")
    print("2. ‚úÖ Detecci√≥n avanzada con patrones RegEx")
    print("3. ‚úÖ Identificaci√≥n autom√°tica de versiones")
    print("4. ‚úÖ Detecci√≥n contextual por tipo de p√°gina")
    print("5. ‚úÖ Sistema de confianza en detecciones")
    print("6. ‚úÖ Cat√°logo global de librer√≠as")
    print("7. ‚úÖ Importar/exportar cat√°logo (CSV/JSON)")
    
    print("\nüöÄ C√ìMO USAR:")
    print("1. python dashboard.py          # Interfaz web con cat√°logo global")
    print("2. python analyzer.py           # An√°lisis desde l√≠nea de comandos")
    print("3. http://localhost:5000/global-libraries  # Gestionar cat√°logo global")
    
    print("\nüîß MEJORAS EN LA DETECCI√ìN:")
    print("‚Ä¢ Reconoce autom√°ticamente jQuery, Bootstrap, D3, Chart.js, etc.")
    print("‚Ä¢ Extrae versiones de nombres de archivos")
    print("‚Ä¢ Detecta librer√≠as bas√°ndose en el contexto de la p√°gina")
    print("‚Ä¢ Asigna niveles de confianza a las detecciones")
    print("‚Ä¢ Identifica librer√≠as faltantes por contexto")
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\n‚úÖ ¬°Todo listo! Las funcionalidades avanzadas est√°n configuradas.")
    else:
        print("\n‚ùå Configuraci√≥n incompleta. Revisa los errores arriba.")
        sys.exit(1)